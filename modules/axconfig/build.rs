use std::io::{Result, Write};
use std::{convert::AsRef, fs, path::Path};
use toml::{value::Table, Value};

fn main() {
    let arch = std::env::var("CARGO_CFG_TARGET_ARCH").unwrap();
    let platform = if cfg!(feature = "platform-qemu-virt-riscv") {
        "qemu-virt-riscv"
    } else if cfg!(feature = "platform-qemu-virt-aarch64") {
        "qemu-virt-aarch64"
    } else {
        println!("Unsupported platform, use dummy config!");
        "dummy"
    };

    gen_config_rs(&arch, platform).unwrap();
}

fn parse_config_toml(result: &mut Table, path: impl AsRef<Path>) -> Result<()> {
    println!("Reading config file: {}", path.as_ref().display());
    let config_content = std::fs::read_to_string(path)?;
    let config: Value = toml::from_str(&config_content)?;
    if let Value::Table(table) = config {
        for (k, v) in table {
            result.insert(k, v);
        }
    }
    Ok(())
}

fn is_num(s: &str) -> bool {
    let s = s.replace('_', "");
    if s.parse::<usize>().is_ok() {
        true
    } else if let Some(s) = s.strip_prefix("0x") {
        usize::from_str_radix(s, 16).is_ok()
    } else {
        false
    }
}

fn gen_config_rs(arch: &str, platform: &str) -> Result<()> {
    // Load config file
    let mut config = Table::new();
    parse_config_toml(&mut config, "src/defconfig.toml").unwrap();
    parse_config_toml(&mut config, format!("src/platform/{platform}.toml")).unwrap();

    println!("{config:#x?}");

    // Generate config.rs
    let mut output = Vec::new();
    writeln!(output, "// {arch}_{platform}")?;
    writeln!(output, "// Generated by build.rs, DO NOT edit!")?;

    for (key, value) in &config {
        let var_name = key.to_uppercase().replace('-', "_");
        if let Value::String(s) = value {
            if is_num(s) {
                writeln!(output, "pub const {var_name}: usize = {s};")?;
            } else {
                writeln!(output, "pub const {var_name}: &str = \"{s}\";")?;
            }
        }
    }

    writeln!(output, "pub const MMIO_REGIONS: &[(usize, usize)] = &[")?;
    if let Some(regions) = config["mmio-regions"].as_array() {
        for r in regions {
            let r = r.as_array().unwrap();
            writeln!(
                output,
                "    ({}, {}),",
                r[0].as_str().unwrap(),
                r[1].as_str().unwrap()
            )?;
        }
    }
    writeln!(output, "];")?;

    let out_path = format!("src/config_{}.rs", platform.replace('-', "_"));
    fs::write(out_path, output)?;

    Ok(())
}
