searchState.loadedDescShard("arceos_api", 0, "Public APIs and types for ArceOS modules\nA socket address could not be bound because the address is …\nAn entity already exists, often a file.\nThe error type used by ArceOS.\nA specialized <code>Result</code> type with <code>AxError</code> as the error type.\nBad address.\nBad internal state.\nThe connection was refused by the remote server,\nThe connection was reset by the remote server.\nA non-empty directory was specified where an empty …\nContains the error value\nData not valid for the operation were encountered.\nInvalid parameter/argument.\nInput/output error.\nThe filesystem object is, unexpectedly, a directory.\nNot enough space/cannot allocate memory.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nThe requested entity is not found.\nContains the success value\nThe operation lacked the necessary privileges to complete.\nDevice or resource is busy.\nThe underlying storage (typically, a filesystem) is full.\nAn error returned when an operation could not be completed …\nThis operation is unsupported or unimplemented.\nThe operation needs to block to complete, but the blocking …\nAn error returned when an operation could not be completed …\nReturns the error description.\nReturns the error code value in <code>i32</code>.\nPlatform-specific constants and parameters.\nGraphics manipulation operations.\nReturns the argument unchanged.\nFilesystem manipulation operations.\nCalls <code>U::from(self)</code>.\nInput/output operations.\nMemory management.\nRe-exports of ArceOS modules.\nNetworking primitives for TCP/UDP communication.\nStandard input and output.\nSystem operations.\nMulti-threading management.\nTime-related operations.\nArchitecture identifier.\nPlatform package.\nPlatform identifier.\nStack size of each task.\nNumber of timer ticks per second (Hz). A timer tick may …\nDevice specifications\nPlatform configs\nIPI interrupt num\nMMIO ranges with format (<code>base_paddr</code>, <code>size</code>).\nEnd PCI bus number.\nBase physical address of the PCIe ECAM space.\nPCI device memory ranges.\nTimer interrupt num.\nVirtIO MMIO ranges with format (<code>base_paddr</code>, <code>size</code>).\nPlatform family. Number of CPUs\nKernel address space base.\nKernel address space size.\nBase physical address of the kernel image.\nBase virtual address of the kernel image.\nOffset of bus address and phys address. some boards, the …\nBase address of the whole physical memory.\nEnd address of the whole physical memory.\nSize of the whole physical memory.\nLinear mapping offset, for quick conversions between …\nThe information of the graphics device.\nFlushes the framebuffer, i.e. show on the screen.\nGets the framebuffer information.\nThe base virtual address of the framebuffer.\nThe size of the framebuffer in bytes.\nReturns the argument unchanged.\nThe visible height.\nCalls <code>U::from(self)</code>.\nThe visible width.\nAlias of <code>axfs_vfs::VfsDirEntry</code>.\nA handle to an opened directory.\nA disk device with a cursor.\nAlias of <code>axfs_vfs::VfsNodeAttr</code>.\nA handle to an opened file.\nAlias of <code>axfs_vfs::VfsNodePerm</code>.\nAlias of <code>axfs_vfs::VfsNodeType</code>.\nOptions and flags which can be used to configure how a …\nEnumeration of possible methods to seek within an I/O …\nBlock device\nCharacter device\nSets the offset to the current position plus the specified …\nDirectory\nSets the offset to the size of this object plus the …\nFIFO (named pipe)\nRegular file\nThe interface to define custom filesystems in user apps.\nSocket\nSets the offset to the provided number of bytes.\nSymbolic link\nSets the option for the append mode.\nCreates a new, empty directory at the provided path.\nReturns the current working directory.\nReturns attributes of the file.\nFlushes the file, writes all buffered data to the …\nOpens a directory at the path relative to the current …\nOpens a file at the path relative to the current directory …\nReads directory entries starts from the current position …\nReads the file at the current position, returns the number …\nReads the file at the given position, returns the number …\nRemoves an empty directory.\nRemoves a file from the filesystem.\nRename a file or directory to a new name.\nSets the cursor of the file to the specified offset. …\nChanges the current working directory to the specified …\nTruncates the file to the specified size.\nWrites the file at the current position, returns the …\nWrites the file at the given position, returns the number …\nSets the option to create a new file, or open it if it …\nSets the option to create a new file, failing if it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new disk.\nCreates a blank new set of options ready for configuration.\nCreates a new instance of the filesystem with …\nGet the position of the cursor.\nSets the option for read access.\nRead within one block, returns the number of bytes read.\nSet the position of the cursor.\nGet the size of the disk.\nSets the option for truncating a previous file.\nSets the option for write access.\nWrite within one block, returns the number of bytes …\nI/O poll results.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nObject can be read now.\nObject can be writen now.\nRepresents information related to a DMA operation.\nAllocates a continuous memory blocks with the given <code>layout</code> …\nAllocates <strong>coherent</strong> memory that meets Direct Memory Access …\nDeallocates the memory block at the given <code>ptr</code> pointer with …\nDeallocates coherent memory previously allocated.\nRepresents the physical address of this memory region on …\nThe address at which the CPU accesses this memory region. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA handle to a TCP socket.\nA handle to a UDP socket.\nResolves the host name to a list of IP addresses.\nPoll the network stack.\nAccepts a new connection on the TCP socket.\nBinds the TCP socket to the given address and port.\nConnects the TCP socket to the given address and port.\nStarts listening on the bound address and port.\nReturns the remote address and port of the TCP socket.\nReturns whether the TCP socket is readable or writable.\nReceives data on the TCP socket, and stores it in the …\nTransmits data in the given buffer on the TCP socket.\nMoves this TCP socket into or out of nonblocking mode.\nCloses the connection on the TCP socket.\nCreates a new TCP socket.\nReturns the local address and port of the TCP socket.\nBinds the UDP socket to the given address and port.\nConnects this UDP socket to a remote address, allowing the …\nReceives a single datagram message on the UDP socket, …\nReturns the remote address and port of the UDP socket.\nReturns whether the UDP socket is readable or writable.\nReceives a single datagram message on the UDP socket from …\nReceives a single datagram message on the UDP socket.\nSends data on the UDP socket to the remote address to …\nSends data on the UDP socket to the given address. On …\nMoves this UDP socket into or out of nonblocking mode.\nCreates a new UDP socket.\nReturns the local address and port of the UDP socket.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads a slice of bytes from the console, returns the …\nWrites a slice of bytes to the console, returns the number …\nWrites a formatted string to the console.\nShutdown the whole system and all CPUs.\nA mask to specify the CPU affinity. The wrapper type for …\nA handle to a task.\nA handle to a wait queue.\nReturns the current task’s ID.\nExits the current task with the given exit code.\nSets the cpu affinity of the current task.\nSets the priority of the current task.\nCurrent task is going to sleep, it will be woken up at the …\nSpawns a new task with the given entry point and other …\nWaits for the given task to exit, and returns its exit …\nBlocks the current task and put it into the wait queue, …\nBlocks the current task and put it into the wait queue, …\nWakes up one or more tasks in the wait queue.\nCurrent task gives up the CPU time voluntarily, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the task ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty wait queue.\nA measurement of the system clock.\nReturns the time elapsed since system boot.\nReturns the time elapsed since epoch, also known as …")