searchState.loadedDescShard("axmm", 0, "ArceOS memory management module.\nThe virtual memory address space.\nAllocation mapping backend.\nA unified enum type for different memory mapping backends.\nLinear mapping backend.\nReturns the address space base.\nChecks whether an access to the specified memory region is …\nRemoves all mappings in the address space.\nChecks if the address space contains the given address …\nCopies page table mappings from another address space.\nReturns the address space end.\nFinds a free area that can accommodate the given size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles a page fault at the given address.\nInitializes virtual memory management.\nInitializes kernel paging for secondary CPUs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the globally unique kernel address space.\nReturns the root physical address of the kernel page table.\nAdd a new allocation mapping.\nAdd a new linear mapping.\nCreates a new allocation mapping backend.\nCreates a new address space for kernel itself.\nCreates a new linear mapping backend.\nCreates a new address space for user processes.\nReturns the reference to the inner page table.\nReturns the root physical address of the inner page table.\nUpdates mapping within the specified virtual address range.\nTo read data from the address space.\nReturns the address space size.\nRemoves mappings within the specified virtual address …\nTo write data to the address space.\n<code>vaddr - paddr</code>.\nWhether to populate the physical frames when creating the …")