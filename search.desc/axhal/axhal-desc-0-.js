searchState.loadedDescShard("axhal", 0, "ArceOS hardware abstraction layer, provides unified APIs …\nWrapper functions for assembly instructions.\nConsole input and output.\nCPU register states for context switching.\nInitializes the platform at the early stage for the …\nInitializes the platform at the early stage for secondary …\nInitializes the platform at the later stage for the …\nInitializes the platform at the later stage for secondary …\nInitializes CPU-local data structures for the primary core.\nInitializes CPU-local data structures for secondary cores.\nInterrupt management.\nPhysical memory management.\nPage table manipulation.\nCPU-local data structures.\nCPU power management.\nTime-related operations.\nThread Local Storage (TLS) support.\nTrap handling.\nMakes the current CPU to ignore interrupts.\nAllows the current CPU to respond to interrupts.\nFlushes the TLB.\nHalt the current CPU.\nReturns whether the current CPU is allowed to respond to …\nReads the current page table root register for kernel …\nReads the thread pointer of the current CPU (<code>FS_BASE</code>).\nReads the current page table root register for user space (…\nRelaxes the current CPU and waits for interrupts.\nWrites the register to update the current page table root …\nWrites the thread pointer of the current CPU (<code>FS_BASE</code>).\nWrites the register to update the current page table root …\nReads bytes from the console into the given mutable slice.\nWrites given bytes to the console.\nSaved hardware states of a task.\nSaved registers when a trap (interrupt or exception) …\nContext to enter user space.\nGets the 0th syscall argument.\nGets the 1st syscall argument.\nGets the 2nd syscall argument.\nGets the 3rd syscall argument.\nGets the 4th syscall argument.\nGets the 5th syscall argument.\nThe <code>CR3</code> register value, i.e., the page table root.\nCreates an empty context with all registers set to zero.\nEnters user space.\nExtended states, i.e., FP/SIMD states.\nCreates a new context from the given <code>TrapFrame</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThread Local Storage (TLS).\nGets the instruction pointer.\nGets the stack pointer.\nThe <code>gs_base</code> register value.\nInitializes the context for a new task, with the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the trap is from userspace.\nThe kernel stack top of the task.\nCreates a new context with the given entry point, user …\nCreates a dummy context for a new task.\n<code>RSP</code> after all callee-saved registers are pushed.\nSets the instruction pointer.\nChanges the page table root in this context.\nSets the return value register.\nSets the stack pointer.\nSwitches to another task.\nSend to all other CPUs.\nSend to the current CPU.\nIPI interrupt num\nTarget specification for inter-processor interrupts (IPIs).\nSend to a specific CPU.\nReturns the argument unchanged.\nHandles the IRQ.\nCalls <code>U::from(self)</code>.\nIRQ handler.\nRegisters an IRQ handler for the given IRQ.\nSends an inter-processor interrupt (IPI) to the specified …\nEnables or disables the given IRQ.\nUnregisters the IRQ handler for the given IRQ.\nThe CPU ID of the current CPU.\nThe CPU ID of the target CPU.\nThe CPU ID of the current CPU.\nThe total number of CPUs.\nDevice memory. (e.g., MMIO regions)\nExecutable.\nFree memory for allocation.\nThe flags of a physical memory region.\nThe size of a 4K page (4096 bytes).\nA physical memory address.\nA range of physical addresses <code>PhysAddr</code>.\nA physical memory region.\nReadable.\nReserved memory, do not use for allocation.\nUncachable memory. (e.g., framebuffer)\nA virtual memory address.\nA range of virtual addresses <code>VirtAddr</code>.\nWritable.\nGet a flags value with all known bits set.\nConverts the virtual address to a mutable raw pointer.\nConverts the virtual address to a mutable raw pointer of a …\nConverts the virtual address to a raw pointer.\nConverts the virtual address to a raw pointer of a …\nConverts an <code>PhysAddr</code> to an <code>usize</code>.\nConverts an <code>VirtAddr</code> to an <code>usize</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nFills the <code>.bss</code> section with zeros.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe upper bound of the range (exclusive).\nThe upper bound of the range (exclusive).\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe region flags, see <code>MemRegionFlags</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreates a new virtual address from a mutable raw pointer.\nGet a flags value with the bits of a flag with the given …\nCreates a new virtual address from a raw pointer.\nConverts an <code>usize</code> to an <code>PhysAddr</code>.\nConverts an <code>usize</code> to an <code>VirtAddr</code>.\nInitializes physical memory regions.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns an iterator over all physical memory regions.\nReturns all device memory (MMIO) ranges on the platform.\nThe region name, used for identification.\nCreates a MMIO region with default flags (readable, …\nCreates a RAM region with default flags (readable, …\nCreates a reserved memory region with default flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAlias for <code>PhysAddr::from_usize</code>.\nThe start physical address of the region.\nReturns all physical memory (RAM) ranges on the platform.\nTranslates a physical address to a virtual address.\nThe intersection of a source flags value with the …\nReturns all reserved physical memory ranges on the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe size in bytes of the region.\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the total size of physical memory (RAM) on the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAlias for <code>VirtAddr::from_usize</code>.\nTranslates a virtual address to a physical address.\nThe architecture-specific page table.\nImplementation of <code>PagingHandler</code>, to provide physical …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the pointer to the current task with …\nSets the pointer to the current task with …\nReturns the ID of the current CPU.\nReturns whether the current CPU is the primary CPU (aka …\nBootstraps the given CPU core with the given initial stack …\nShutdown the whole system.\nA <code>Duration</code> type to represent a span of time, typically …\nThe maximum duration.\nThe duration of one microsecond.\nNumber of microseconds in a second.\nThe duration of one millisecond.\nNumber of milliseconds in a second.\nThe duration of one nanosecond.\nNumber of nanoseconds in a microsecond.\nNumber of nanoseconds in a millisecond.\nNumber of nanoseconds in a second.\nThe duration of one second.\nA measurement of the system clock.\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nBusy waiting for the given duration.\nBusy waiting until reaching the given deadline.\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nReturns the current clock time in hardware ticks.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.\nDivides <code>Duration</code> by <code>f32</code>.\nDivides <code>Duration</code> by <code>f64</code>.\nReturn epoch offset in nanoseconds (wall time offset to …\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of weeks.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>Duration</code> spans no time.\nReturns the time elapsed since system boot in <code>TimeValue</code>.\nReturns nanoseconds elapsed since system boot.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nConverts nanoseconds to hardware ticks.\nCreates a new <code>Duration</code> from the specified number of whole …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nSet a one-shot timer.\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nConverts hardware ticks to nanoseconds.\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nReturns the time elapsed since epoch (also known as …\nReturns nanoseconds elapsed since epoch (also known as …\nThe memory region for thread-local storage.\nAllocates the memory region for TLS, and initializes it.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the pointer to the TLS static area.\nThe memory is device memory.\nThe memory is executable.\nA slice of IRQ handler functions.\nA slice of IRQ handler functions.\nA slice of page fault handler functions.\nA slice of page fault handler functions.\nGeneric page table entry flags that indicate the …\nThe memory is readable.\nA slice of syscall handler functions.\nA slice of syscall handler functions.\nThe memory is uncached.\nThe memory is user accessible.\nThe memory is writable.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.")