#[cfg(feature = "cbindings")]
fn main() {
    use std::path::{Path, PathBuf};

    fn gen_rust_to_c_bindings(crate_dir: &Path, out_file: &str) {
        let mut config = cbindgen::Config {
            language: cbindgen::Language::C,
            cpp_compat: true,
            no_includes: false,
            usize_is_size_t: true,
            sys_includes: vec![
                "sys/types.h".into(),
                "sys/stat.h".into(),
                "stdio.h".into(),
                "time.h".into(),
            ],
            header: Some("/* Generated by cbindgen and build.rs, DO NOT edit! */".into()),
            ..Default::default()
        };
        config
            .export
            .rename
            .insert("stat".into(), "struct stat".into());

        config
            .export
            .rename
            .insert("timespec".into(), "struct timespec".into());

        cbindgen::generate_with_config(crate_dir, config)
            .expect("Unable to generate rust->c bindings")
            .write_to_file(out_file);
    }

    fn gen_c_to_rust_bindings(crate_dir: &Path, in_file: &str, out_file: &str) {
        println!("cargo:rerun-if-changed={in_file}");

        let include_dir = crate_dir.join("../c_libax/include");
        let allow_types = [
            "stat", "size_t", "ssize_t", "off_t", "mode_t", "O_*", "FILE",
        ];
        let allow_vars = ["O_.*"];

        let mut builder = bindgen::Builder::default()
            .header(in_file)
            .clang_arg(format!("-I{}", include_dir.display()))
            .parse_callbacks(Box::new(bindgen::CargoCallbacks))
            .derive_default(true)
            .size_t_is_usize(false)
            .use_core();
        for ty in allow_types {
            builder = builder.allowlist_type(ty);
        }
        for var in allow_vars {
            builder = builder.allowlist_var(var);
        }

        builder
            .generate()
            .expect("Unable to generate c->rust bindings")
            .write_to_file(out_file)
            .expect("Couldn't write bindings!");
    }

    let crate_dir = PathBuf::from(&std::env::var("CARGO_MANIFEST_DIR").unwrap());
    gen_c_to_rust_bindings(&crate_dir, "ctypes.h", "src/cbindings/ctypes_gen.rs");
    gen_rust_to_c_bindings(&crate_dir, "libax.h");
}

#[cfg(not(feature = "cbindings"))]
fn main() {}
