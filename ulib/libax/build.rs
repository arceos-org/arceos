#[cfg(feature = "cbindings")]
fn main() {
    use std::io::Write;
    use std::path::{Path, PathBuf};

    fn gen_ax_config(out_file: &str) -> std::io::Result<()> {
        let mut output = Vec::new();
        writeln!(output, "//! Generated by build.rs, DO NOT edit!\n")?;
        writeln!(
            output,
            "#define AX_CONFIG_TASK_STACK_SIZE {:#x}",
            axconfig::TASK_STACK_SIZE,
        )?;

        std::fs::write(out_file, output)?;
        Ok(())
    }

    fn gen_pthread_mutex(out_file: &str) -> std::io::Result<()> {
        // TODO: generate size and initial content automatically.
        let (mutex_size, mutex_init) = if cfg!(feature = "multitask") {
            if cfg!(feature = "smp") {
                (6, "{0, 8, 0, 0, 0, 0}") // core::mem::transmute::<_, [usize; 6]>(axsync::Mutex::new(()))
            } else {
                (5, "{8, 0, 0, 0, 0}") // core::mem::transmute::<_, [usize; 5]>(axsync::Mutex::new(()))
            }
        } else {
            (1, "{0}")
        };

        let mut output = Vec::new();
        writeln!(output, "//! Generated by build.rs, DO NOT edit!")?;
        writeln!(
            output,
            r#"
typedef struct {{
    long __l[{mutex_size}];
}} pthread_mutex_t;

#define PTHREAD_MUTEX_INITIALIZER {{ __l: {mutex_init}}}
"#
        )?;
        std::fs::write(out_file, output)?;
        Ok(())
    }

    fn gen_rust_to_c_bindings(crate_dir: &Path, out_file: &str) {
        // load configs from "cbindgen.toml"
        cbindgen::generate(crate_dir)
            .expect("Unable to generate rust->c bindings")
            .write_to_file(out_file);
    }

    fn gen_c_to_rust_bindings(crate_dir: &Path, in_file: &str, out_file: &str) {
        println!("cargo:rerun-if-changed={in_file}");

        let include_dir = crate_dir.join("../c_libax/include");
        let allow_types = [
            "stat",
            "size_t",
            "ssize_t",
            "off_t",
            "mode_t",
            "O_*",
            "sock.*",
            "FILE",
            "jmp_buf",
            "fd.*",
            "timeval",
            "pthread_.*",
            "epoll_event",
            "iovec",
        ];
        let allow_vars = [
            "O_.*",
            "AF_.*",
            "SOCK_.*",
            "IPPROTO_.*",
            "FD_.*",
            "F_.*",
            "_SC_.*",
            "SO_.*",
            "SOL_.*",
            "EPOLL_CTL_.*",
            "EPOLL.*",
        ];

        #[derive(Debug)]
        struct MyCallbacks;

        impl bindgen::callbacks::ParseCallbacks for MyCallbacks {
            fn include_file(&self, fname: &str) {
                if !fname.contains("ax_pthread_mutex.h") {
                    println!("cargo:rerun-if-changed={}", fname);
                }
            }
        }

        let mut builder = bindgen::Builder::default()
            .header(in_file)
            .clang_arg(format!("-I{}", include_dir.display()))
            .clang_arg("-I./include")
            .parse_callbacks(Box::new(MyCallbacks))
            .derive_default(true)
            .size_t_is_usize(false)
            .use_core();
        for ty in allow_types {
            builder = builder.allowlist_type(ty);
        }
        for var in allow_vars {
            builder = builder.allowlist_var(var);
        }

        builder
            .generate()
            .expect("Unable to generate c->rust bindings")
            .write_to_file(out_file)
            .expect("Couldn't write bindings!");
    }

    let crate_dir = PathBuf::from(&std::env::var("CARGO_MANIFEST_DIR").unwrap());
    gen_rust_to_c_bindings(&crate_dir, "include/libax.h");
    gen_ax_config("include/axconfig.h").unwrap();
    gen_pthread_mutex("include/ax_pthread_mutex.h").unwrap();
    gen_c_to_rust_bindings(&crate_dir, "ctypes.h", "src/cbindings/ctypes_gen.rs");
}

#[cfg(not(feature = "cbindings"))]
fn main() {}
