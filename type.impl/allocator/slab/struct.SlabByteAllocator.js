(function() {
    var type_impls = Object.fromEntries([["axalloc",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BaseAllocator-for-SlabByteAllocator\" class=\"impl\"><a href=\"#impl-BaseAllocator-for-SlabByteAllocator\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BaseAllocator for SlabByteAllocator</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.init\" class=\"method trait-impl\"><a href=\"#method.init\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">init</a>(&amp;mut self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>, size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Initialize the allocator with a free memory region.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_memory\" class=\"method trait-impl\"><a href=\"#method.add_memory\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">add_memory</a>(&amp;mut self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>, size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, AllocError&gt;</h4></section></summary><div class='docblock'>Add a free memory region to the allocator.</div></details></div></details>","BaseAllocator","axalloc::DefaultByteAllocator"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ByteAllocator-for-SlabByteAllocator\" class=\"impl\"><a href=\"#impl-ByteAllocator-for-SlabByteAllocator\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ByteAllocator for SlabByteAllocator</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc\" class=\"method trait-impl\"><a href=\"#method.alloc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">alloc</a>(&amp;mut self, layout: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/alloc/layout/struct.Layout.html\" title=\"struct core::alloc::layout::Layout\">Layout</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;, AllocError&gt;</h4></section></summary><div class='docblock'>Allocate memory with the given size (in bytes) and alignment.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dealloc\" class=\"method trait-impl\"><a href=\"#method.dealloc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">dealloc</a>(&amp;mut self, pos: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;, layout: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/alloc/layout/struct.Layout.html\" title=\"struct core::alloc::layout::Layout\">Layout</a>)</h4></section></summary><div class='docblock'>Deallocate memory at the given position, size, and alignment.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.total_bytes\" class=\"method trait-impl\"><a href=\"#method.total_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">total_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns total memory size in bytes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.used_bytes\" class=\"method trait-impl\"><a href=\"#method.used_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">used_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns allocated memory size in bytes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.available_bytes\" class=\"method trait-impl\"><a href=\"#method.available_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">available_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns available memory size in bytes.</div></details></div></details>","ByteAllocator","axalloc::DefaultByteAllocator"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SlabByteAllocator\" class=\"impl\"><a href=\"#impl-SlabByteAllocator\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SlabByteAllocator</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">new</a>() -&gt; SlabByteAllocator</h4></section></summary><div class=\"docblock\"><p>Creates a new empty <code>SlabByteAllocator</code>.</p>\n</div></details></div></details>",0,"axalloc::DefaultByteAllocator"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[5926]}