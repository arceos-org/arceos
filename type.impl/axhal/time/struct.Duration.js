(function() {
    var type_impls = Object.fromEntries([["axhal",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1103\">Source</a></span><a href=\"#impl-Add-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1104\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1107\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1113\">Source</a></span><a href=\"#impl-AddAssign-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1115\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a></span><a href=\"#impl-Clone-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstDefault-for-Duration\" class=\"impl\"><a class=\"src rightside\" href=\"http://docs.rs/const-default/1.0.0/src/const_default/lib.rs.html#179\">Source</a><a href=\"#impl-ConstDefault-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"http://docs.rs/const-default/1.0.0/const_default/trait.ConstDefault.html\" title=\"trait const_default::ConstDefault\">ConstDefault</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.DEFAULT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"http://docs.rs/const-default/1.0.0/src/const_default/lib.rs.html#180\">Source</a><a href=\"#associatedconstant.DEFAULT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"http://docs.rs/const-default/1.0.0/const_default/trait.ConstDefault.html#associatedconstant.DEFAULT\" class=\"constant\">DEFAULT</a>: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>The constant default value.</div></details></div></details>","ConstDefault","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1227\">Source</a></span><a href=\"#impl-Debug-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1228\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a></span><a href=\"#impl-Default-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Cu32%3E-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1167\">Source</a></span><a href=\"#impl-Div%3Cu32%3E-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1168\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1172\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<u32>","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Cu32%3E-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1178\">Source</a></span><a href=\"#impl-DivAssign%3Cu32%3E-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1181\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<u32>","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Duration\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1547\">Source</a><a href=\"#impl-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_secs_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1605\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"axhal/time/struct.Duration.html#tymethod.try_from_secs_f32\" class=\"fn\">try_from_secs_f32</a>(secs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/time/struct.TryFromFloatSecsError.html\" title=\"struct core::time::TryFromFloatSecsError\">TryFromFloatSecsError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>The checked version of <a href=\"axhal/time/struct.Duration.html#method.from_secs_f32\" title=\"associated function axhal::time::Duration::from_secs_f32\"><code>from_secs_f32</code></a>.</p>\n<p>This constructor will return an <code>Err</code> if <code>secs</code> is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">0.0</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">1e-20</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">4.2e-7</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">420</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">2.7</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_048</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">3e10</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">30_000_001_024</span>, <span class=\"number\">0</span>)));\n<span class=\"comment\">// subnormal float:\n</span><span class=\"kw\">let </span>res = Duration::try_from_secs_f32(f32::from_bits(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(-<span class=\"number\">5.0</span>);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(f32::NAN);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">2e19</span>);\n<span class=\"macro\">assert!</span>(res.is_err());\n\n<span class=\"comment\">// the conversion uses rounding with tie resolution to even\n</span><span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">0.999e-9</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)));\n\n<span class=\"comment\">// this float represents exactly 976562.5e-9\n</span><span class=\"kw\">let </span>val = f32::from_bits(<span class=\"number\">0x3A80_0000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">976_562</span>)));\n\n<span class=\"comment\">// this float represents exactly 2929687.5e-9\n</span><span class=\"kw\">let </span>val = f32::from_bits(<span class=\"number\">0x3B40_0000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">2_929_688</span>)));\n\n<span class=\"comment\">// this float represents exactly 1.000_976_562_5\n</span><span class=\"kw\">let </span>val = f32::from_bits(<span class=\"number\">0x3F802000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">976_562</span>)));\n\n<span class=\"comment\">// this float represents exactly 1.002_929_687_5\n</span><span class=\"kw\">let </span>val = f32::from_bits(<span class=\"number\">0x3F806000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">2_929_688</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_secs_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1681\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"axhal/time/struct.Duration.html#tymethod.try_from_secs_f64\" class=\"fn\">try_from_secs_f64</a>(secs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/time/struct.TryFromFloatSecsError.html\" title=\"struct core::time::TryFromFloatSecsError\">TryFromFloatSecsError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>The checked version of <a href=\"axhal/time/struct.Duration.html#method.from_secs_f64\" title=\"associated function axhal::time::Duration::from_secs_f64\"><code>from_secs_f64</code></a>.</p>\n<p>This constructor will return an <code>Err</code> if <code>secs</code> is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">0.0</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">1e-20</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">4.2e-7</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">420</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">2.7</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">3e10</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">30_000_000_000</span>, <span class=\"number\">0</span>)));\n<span class=\"comment\">// subnormal float\n</span><span class=\"kw\">let </span>res = Duration::try_from_secs_f64(f64::from_bits(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(-<span class=\"number\">5.0</span>);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(f64::NAN);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">2e19</span>);\n<span class=\"macro\">assert!</span>(res.is_err());\n\n<span class=\"comment\">// the conversion uses rounding with tie resolution to even\n</span><span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">0.999e-9</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">0.999_999_999_499</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">999_999_999</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">0.999_999_999_501</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">42.999_999_999_499</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">42</span>, <span class=\"number\">999_999_999</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">42.999_999_999_501</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">43</span>, <span class=\"number\">0</span>)));\n\n<span class=\"comment\">// this float represents exactly 976562.5e-9\n</span><span class=\"kw\">let </span>val = f64::from_bits(<span class=\"number\">0x3F50_0000_0000_0000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">976_562</span>)));\n\n<span class=\"comment\">// this float represents exactly 2929687.5e-9\n</span><span class=\"kw\">let </span>val = f64::from_bits(<span class=\"number\">0x3F68_0000_0000_0000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">2_929_688</span>)));\n\n<span class=\"comment\">// this float represents exactly 1.000_976_562_5\n</span><span class=\"kw\">let </span>val = f64::from_bits(<span class=\"number\">0x3FF0_0400_0000_0000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">976_562</span>)));\n\n<span class=\"comment\">// this float represents exactly 1.002_929_687_5\n</span><span class=\"kw\">let </span>val = f64::from_bits(<span class=\"number\">0x3_FF00_C000_0000_000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">2_929_688</span>)));</code></pre></div>\n</div></details></div></details>",0,"axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Duration\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#86\">Source</a><a href=\"#impl-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.SECOND\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#98\">Source</a><h4 class=\"code-header\">pub const <a href=\"axhal/time/struct.Duration.html#associatedconstant.SECOND\" class=\"constant\">SECOND</a>: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>duration_constants</code>)</span></div></span></summary><div class=\"docblock\"><p>The duration of one second.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::SECOND, Duration::from_secs(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MILLISECOND\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#111\">Source</a><h4 class=\"code-header\">pub const <a href=\"axhal/time/struct.Duration.html#associatedconstant.MILLISECOND\" class=\"constant\">MILLISECOND</a>: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>duration_constants</code>)</span></div></span></summary><div class=\"docblock\"><p>The duration of one millisecond.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::MILLISECOND, Duration::from_millis(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MICROSECOND\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#124\">Source</a><h4 class=\"code-header\">pub const <a href=\"axhal/time/struct.Duration.html#associatedconstant.MICROSECOND\" class=\"constant\">MICROSECOND</a>: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>duration_constants</code>)</span></div></span></summary><div class=\"docblock\"><p>The duration of one microsecond.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::MICROSECOND, Duration::from_micros(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NANOSECOND\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#137\">Source</a><h4 class=\"code-header\">pub const <a href=\"axhal/time/struct.Duration.html#associatedconstant.NANOSECOND\" class=\"constant\">NANOSECOND</a>: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>duration_constants</code>)</span></div></span></summary><div class=\"docblock\"><p>The duration of one nanosecond.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::NANOSECOND, Duration::from_nanos(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ZERO\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#151\">Source</a></span><h4 class=\"code-header\">pub const <a href=\"axhal/time/struct.Duration.html#associatedconstant.ZERO\" class=\"constant\">ZERO</a>: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>A duration of zero time.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::ZERO;\n<span class=\"macro\">assert!</span>(duration.is_zero());\n<span class=\"macro\">assert_eq!</span>(duration.as_nanos(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#170\">Source</a></span><h4 class=\"code-header\">pub const <a href=\"axhal/time/struct.Duration.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>The maximum duration.</p>\n<p>May vary by platform as necessary. Must be able to contain the difference between\ntwo instances of <a href=\"../../std/time/struct.Instant.html\"><code>Instant</code></a> or two instances of <a href=\"../../std/time/struct.SystemTime.html\"><code>SystemTime</code></a>.\nThis constraint gives it a value of about 584,942,417,355 years in practice,\nwhich is currently used on all platforms.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::MAX, Duration::new(u64::MAX, <span class=\"number\">1_000_000_000 </span>- <span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0, const since 1.58.0\">1.3.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#194\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.new\" class=\"fn\">new</a>(secs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nanos: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of whole seconds and\nadditional nanoseconds.</p>\n<p>If the number of nanoseconds is greater than 1 billion (the number of\nnanoseconds in a second), then it will carry over into the seconds provided.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This constructor will panic if the carry from the nanoseconds overflows\nthe seconds counter.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>five_seconds = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_secs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0, const since 1.32.0\">1.3.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#224\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.from_secs\" class=\"fn\">from_secs</a>(secs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of whole seconds.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_secs(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, duration.subsec_nanos());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_millis\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0, const since 1.32.0\">1.3.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#244\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.from_millis\" class=\"fn\">from_millis</a>(millis: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of milliseconds.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_millis(<span class=\"number\">2_569</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">569_000_000</span>, duration.subsec_nanos());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_micros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.32.0\">1.27.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#270\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.from_micros\" class=\"fn\">from_micros</a>(micros: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of microseconds.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_micros(<span class=\"number\">1_000_002</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2_000</span>, duration.subsec_nanos());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_nanos\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.32.0\">1.27.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#301\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.from_nanos\" class=\"fn\">from_nanos</a>(nanos: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of nanoseconds.</p>\n<p>Note: Using this on the return value of <code>as_nanos()</code> might cause unexpected behavior:\n<code>as_nanos()</code> returns a u128, and can return values that do not fit in u64, e.g. 585 years.\nInstead, consider using the pattern <code>Duration::new(d.as_secs(), d.subsec_nanos())</code>\nif you cannot copy/clone the Duration directly.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_nanos(<span class=\"number\">1_000_000_123</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">123</span>, duration.subsec_nanos());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_weeks\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#331\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.from_weeks\" class=\"fn\">from_weeks</a>(weeks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>duration_constructors</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of weeks.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the given number of weeks overflows the <code>Duration</code> size.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constructors)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_weeks(<span class=\"number\">4</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">4 </span>* <span class=\"number\">7 </span>* <span class=\"number\">24 </span>* <span class=\"number\">60 </span>* <span class=\"number\">60</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, duration.subsec_nanos());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_days\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#359\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.from_days\" class=\"fn\">from_days</a>(days: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>duration_constructors</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of days.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the given number of days overflows the <code>Duration</code> size.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constructors)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_days(<span class=\"number\">7</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">7 </span>* <span class=\"number\">24 </span>* <span class=\"number\">60 </span>* <span class=\"number\">60</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, duration.subsec_nanos());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_hours\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#387\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.from_hours\" class=\"fn\">from_hours</a>(hours: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>duration_constructors_lite</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of hours.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if the given number of hours overflows the <code>Duration</code> size.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constructors_lite)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_hours(<span class=\"number\">6</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">6 </span>* <span class=\"number\">60 </span>* <span class=\"number\">60</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, duration.subsec_nanos());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_mins\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#415\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.from_mins\" class=\"fn\">from_mins</a>(mins: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>duration_constructors_lite</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of minutes.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if the given number of minutes overflows the <code>Duration</code> size.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constructors_lite)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_mins(<span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">10 </span>* <span class=\"number\">60</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, duration.subsec_nanos());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_zero\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#443\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if this <code>Duration</code> spans no time.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert!</span>(Duration::ZERO.is_zero());\n<span class=\"macro\">assert!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>).is_zero());\n<span class=\"macro\">assert!</span>(Duration::from_nanos(<span class=\"number\">0</span>).is_zero());\n<span class=\"macro\">assert!</span>(Duration::from_secs(<span class=\"number\">0</span>).is_zero());\n\n<span class=\"macro\">assert!</span>(!Duration::new(<span class=\"number\">1</span>, <span class=\"number\">1</span>).is_zero());\n<span class=\"macro\">assert!</span>(!Duration::from_nanos(<span class=\"number\">1</span>).is_zero());\n<span class=\"macro\">assert!</span>(!Duration::from_secs(<span class=\"number\">1</span>).is_zero());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_secs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0, const since 1.32.0\">1.3.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#471\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.as_secs\" class=\"fn\">as_secs</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of <em>whole</em> seconds contained by this <code>Duration</code>.</p>\n<p>The returned value does not include the fractional (nanosecond) part of the\nduration, which can be obtained using <a href=\"axhal/time/struct.Duration.html#method.subsec_nanos\" title=\"method axhal::time::Duration::subsec_nanos\"><code>subsec_nanos</code></a>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">730_023_852</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_secs(), <span class=\"number\">5</span>);</code></pre></div>\n<p>To determine the total number of seconds represented by the <code>Duration</code>\nincluding the fractional part, use <a href=\"axhal/time/struct.Duration.html#method.as_secs_f64\" title=\"method axhal::time::Duration::as_secs_f64\"><code>as_secs_f64</code></a> or <a href=\"axhal/time/struct.Duration.html#method.as_secs_f32\" title=\"method axhal::time::Duration::as_secs_f32\"><code>as_secs_f32</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.subsec_millis\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.32.0\">1.27.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#494\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.subsec_millis\" class=\"fn\">subsec_millis</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the fractional part of this <code>Duration</code>, in whole milliseconds.</p>\n<p>This method does <strong>not</strong> return the length of the duration when\nrepresented by milliseconds. The returned number always represents a\nfractional portion of a second (i.e., it is less than one thousand).</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_millis(<span class=\"number\">5_432</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_secs(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(duration.subsec_millis(), <span class=\"number\">432</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.subsec_micros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.32.0\">1.27.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#517\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.subsec_micros\" class=\"fn\">subsec_micros</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the fractional part of this <code>Duration</code>, in whole microseconds.</p>\n<p>This method does <strong>not</strong> return the length of the duration when\nrepresented by microseconds. The returned number always represents a\nfractional portion of a second (i.e., it is less than one million).</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_micros(<span class=\"number\">1_234_567</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_secs(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(duration.subsec_micros(), <span class=\"number\">234_567</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.subsec_nanos\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0, const since 1.32.0\">1.3.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#540\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.subsec_nanos\" class=\"fn\">subsec_nanos</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the fractional part of this <code>Duration</code>, in nanoseconds.</p>\n<p>This method does <strong>not</strong> return the length of the duration when\nrepresented by nanoseconds. The returned number always represents a\nfractional portion of a second (i.e., it is less than one billion).</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_millis(<span class=\"number\">5_010</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_secs(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(duration.subsec_nanos(), <span class=\"number\">10_000_000</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_millis\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const since 1.33.0\">1.33.0 (const: 1.33.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#558\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.as_millis\" class=\"fn\">as_millis</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of whole milliseconds contained by this <code>Duration</code>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">730_023_852</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_millis(), <span class=\"number\">5_730</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_micros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const since 1.33.0\">1.33.0 (const: 1.33.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#577\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.as_micros\" class=\"fn\">as_micros</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of whole microseconds contained by this <code>Duration</code>.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">730_023_852</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_micros(), <span class=\"number\">5_730_023</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_nanos\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const since 1.33.0\">1.33.0 (const: 1.33.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#596\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.as_nanos\" class=\"fn\">as_nanos</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of nanoseconds contained by this <code>Duration</code>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">730_023_852</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_nanos(), <span class=\"number\">5_730_023_852</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.81.0, const since 1.81.0\">1.81.0 (const: 1.81.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#615\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.abs_diff\" class=\"fn\">abs_diff</a>(self, other: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">100</span>, <span class=\"number\">0</span>).abs_diff(Duration::new(<span class=\"number\">80</span>, <span class=\"number\">0</span>)), Duration::new(<span class=\"number\">20</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">100</span>, <span class=\"number\">400_000_000</span>).abs_diff(Duration::new(<span class=\"number\">110</span>, <span class=\"number\">0</span>)), Duration::new(<span class=\"number\">9</span>, <span class=\"number\">600_000_000</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.58.0\">1.16.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#635\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked <code>Duration</code> addition. Computes <code>self + other</code>, returning <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\nif overflow occurred.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>).checked_add(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)), <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>).checked_add(Duration::new(u64::MAX, <span class=\"number\">0</span>)), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.58.0\">1.53.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#670\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Saturating <code>Duration</code> addition. Computes <code>self + other</code>, returning <a href=\"axhal/time/struct.Duration.html#associatedconstant.MAX\" title=\"associated constant axhal::time::Duration::MAX\"><code>Duration::MAX</code></a>\nif overflow occurred.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>).saturating_add(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>).saturating_add(Duration::new(u64::MAX, <span class=\"number\">0</span>)), Duration::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.58.0\">1.16.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#693\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.checked_sub\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, returning <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\nif the result would be negative or if overflow occurred.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>).checked_sub(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)), <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>).checked_sub(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.58.0\">1.53.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#726\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, returning <a href=\"axhal/time/struct.Duration.html#associatedconstant.ZERO\" title=\"associated constant axhal::time::Duration::ZERO\"><code>Duration::ZERO</code></a>\nif the result would be negative or if overflow occurred.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>).saturating_sub(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>).saturating_sub(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)), Duration::ZERO);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.58.0\">1.16.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#749\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, returning\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if overflow occurred.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">500_000_001</span>).checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">2</span>)));\n<span class=\"macro\">assert_eq!</span>(Duration::new(u64::MAX - <span class=\"number\">1</span>, <span class=\"number\">0</span>).checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.58.0\">1.53.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#781\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>, returning\n<a href=\"axhal/time/struct.Duration.html#associatedconstant.MAX\" title=\"associated constant axhal::time::Duration::MAX\"><code>Duration::MAX</code></a> if overflow occurred.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">500_000_001</span>).saturating_mul(<span class=\"number\">2</span>), Duration::new(<span class=\"number\">1</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(Duration::new(u64::MAX - <span class=\"number\">1</span>, <span class=\"number\">0</span>).saturating_mul(<span class=\"number\">2</span>), Duration::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.58.0\">1.16.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#805\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.checked_div\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked <code>Duration</code> division. Computes <code>self / other</code>, returning <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\nif <code>other == 0</code>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">2</span>, <span class=\"number\">0</span>).checked_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>)));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>).checked_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">500_000_000</span>)));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">2</span>, <span class=\"number\">0</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_secs_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.83.0\">1.38.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#834\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.as_secs_f64\" class=\"fn\">as_secs_f64</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of seconds contained by this <code>Duration</code> as <code>f64</code>.</p>\n<p>The returned value includes the fractional (nanosecond) part of the duration.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.as_secs_f64(), <span class=\"number\">2.7</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_secs_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.83.0\">1.38.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#853\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.as_secs_f32\" class=\"fn\">as_secs_f32</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of seconds contained by this <code>Duration</code> as <code>f32</code>.</p>\n<p>The returned value includes the fractional (nanosecond) part of the duration.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.as_secs_f32(), <span class=\"number\">2.7</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_millis_f64\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#872\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.as_millis_f64\" class=\"fn\">as_millis_f64</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>duration_millis_float</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of milliseconds contained by this <code>Duration</code> as <code>f64</code>.</p>\n<p>The returned value includes the fractional (nanosecond) part of the duration.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_millis_float)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">345_678_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.as_millis_f64(), <span class=\"number\">2_345.678</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_millis_f32\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#892\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.as_millis_f32\" class=\"fn\">as_millis_f32</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>duration_millis_float</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of milliseconds contained by this <code>Duration</code> as <code>f32</code>.</p>\n<p>The returned value includes the fractional (nanosecond) part of the duration.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_millis_float)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">345_678_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.as_millis_f32(), <span class=\"number\">2_345.678</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_secs_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#927\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"axhal/time/struct.Duration.html#tymethod.from_secs_f64\" class=\"fn\">from_secs_f64</a>(secs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of seconds represented\nas <code>f64</code>.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>This constructor will panic if <code>secs</code> is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">0.0</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">1e-20</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">4.2e-7</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">420</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">2.7</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">3e10</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">30_000_000_000</span>, <span class=\"number\">0</span>));\n<span class=\"comment\">// subnormal float\n</span><span class=\"kw\">let </span>res = Duration::from_secs_f64(f64::from_bits(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"comment\">// conversion uses rounding\n</span><span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">0.999e-9</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_secs_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#964\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"axhal/time/struct.Duration.html#tymethod.from_secs_f32\" class=\"fn\">from_secs_f32</a>(secs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of seconds represented\nas <code>f32</code>.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>This constructor will panic if <code>secs</code> is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">0.0</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">1e-20</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">4.2e-7</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">420</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">2.7</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_048</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">3e10</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">30_000_001_024</span>, <span class=\"number\">0</span>));\n<span class=\"comment\">// subnormal float\n</span><span class=\"kw\">let </span>res = Duration::from_secs_f32(f32::from_bits(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"comment\">// conversion uses rounding\n</span><span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">0.999e-9</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#988\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"axhal/time/struct.Duration.html#tymethod.mul_f64\" class=\"fn\">mul_f64</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Multiplies <code>Duration</code> by <code>f64</code>.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>This method will panic if result is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.mul_f64(<span class=\"number\">3.14</span>), Duration::new(<span class=\"number\">8</span>, <span class=\"number\">478_000_000</span>));\n<span class=\"macro\">assert_eq!</span>(dur.mul_f64(<span class=\"number\">3.14e5</span>), Duration::new(<span class=\"number\">847_800</span>, <span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1009\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"axhal/time/struct.Duration.html#tymethod.mul_f32\" class=\"fn\">mul_f32</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Multiplies <code>Duration</code> by <code>f32</code>.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>This method will panic if result is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.mul_f32(<span class=\"number\">3.14</span>), Duration::new(<span class=\"number\">8</span>, <span class=\"number\">478_000_641</span>));\n<span class=\"macro\">assert_eq!</span>(dur.mul_f32(<span class=\"number\">3.14e5</span>), Duration::new(<span class=\"number\">847_800</span>, <span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1030\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"axhal/time/struct.Duration.html#tymethod.div_f64\" class=\"fn\">div_f64</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Divides <code>Duration</code> by <code>f64</code>.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>This method will panic if result is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.div_f64(<span class=\"number\">3.14</span>), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">859_872_611</span>));\n<span class=\"macro\">assert_eq!</span>(dur.div_f64(<span class=\"number\">3.14e5</span>), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">8_599</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1053\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"axhal/time/struct.Duration.html#tymethod.div_f32\" class=\"fn\">div_f32</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Divides <code>Duration</code> by <code>f32</code>.</p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>This method will panic if result is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"comment\">// note that due to rounding errors result is slightly\n// different from 0.859_872_611\n</span><span class=\"macro\">assert_eq!</span>(dur.div_f32(<span class=\"number\">3.14</span>), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">859_872_580</span>));\n<span class=\"macro\">assert_eq!</span>(dur.div_f32(<span class=\"number\">3.14e5</span>), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">8_599</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_duration_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.83.0\">1.80.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1072\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.div_duration_f64\" class=\"fn\">div_duration_f64</a>(self, rhs: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Divides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur1 = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"kw\">let </span>dur2 = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">400_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur1.div_duration_f64(dur2), <span class=\"number\">0.5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_duration_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.83.0\">1.80.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1094\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"axhal/time/struct.Duration.html#tymethod.div_duration_f32\" class=\"fn\">div_duration_f32</a>(self, rhs: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a></h4></section></summary><div class=\"docblock\"><p>Divides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur1 = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"kw\">let </span>dur2 = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">400_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur1.div_duration_f32(dur2), <span class=\"number\">0.5</span>);</code></pre></div>\n</div></details></div></details>",0,"axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a></span><a href=\"#impl-Hash-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Cu32%3E-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1139\">Source</a></span><a href=\"#impl-Mul%3Cu32%3E-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1140\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1143\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<u32>","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Cu32%3E-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1159\">Source</a></span><a href=\"#impl-MulAssign%3Cu32%3E-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1161\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<u32>","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a></span><a href=\"#impl-Ord-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1009-1011\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1048-1050\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1074-1076\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a></span><a href=\"#impl-PartialEq-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a></span><a href=\"#impl-PartialOrd-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1121\">Source</a></span><a href=\"#impl-Sub-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1122\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1125\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1131\">Source</a></span><a href=\"#impl-SubAssign-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1133\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26Duration%3E-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1220\">Source</a></span><a href=\"#impl-Sum%3C%26Duration%3E-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1221\">Source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by “summing up”\nthe items.</div></details></div></details>","Sum<&'a Duration>","axhal::time::TimeValue"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1213\">Source</a></span><a href=\"#impl-Sum-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#1214\">Source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by “summing up”\nthe items.</div></details></div></details>","Sum","axhal::time::TimeValue"],["<section id=\"impl-Copy-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a></span><a href=\"#impl-Copy-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section>","Copy","axhal::time::TimeValue"],["<section id=\"impl-Eq-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a></span><a href=\"#impl-Eq-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section>","Eq","axhal::time::TimeValue"],["<section id=\"impl-StructuralPartialEq-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/time.rs.html#79\">Source</a></span><a href=\"#impl-StructuralPartialEq-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"axhal/time/struct.Duration.html\" title=\"struct axhal::time::Duration\">Duration</a></h3></section>","StructuralPartialEq","axhal::time::TimeValue"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[130108]}