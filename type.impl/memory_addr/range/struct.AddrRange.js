(function() {
    var type_impls = Object.fromEntries([["axhal",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddrRange%3CA%3E\" class=\"impl\"><a href=\"#impl-AddrRange%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; AddrRange&lt;A&gt;<div class=\"where\">where\n    A: MemoryAddr,</div></h3><div class=\"docblock\"><p>Methods for [<code>AddrRange</code>].</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(start: A, end: A) -&gt; AddrRange&lt;A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new address range from the start and end addresses.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>start &gt; end</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::AddrRange;\n\n<span class=\"kw\">let </span>range = AddrRange::new(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x2000</span>);\n<span class=\"macro\">assert_eq!</span>(range.start, <span class=\"number\">0x1000</span>);\n<span class=\"macro\">assert_eq!</span>(range.end, <span class=\"number\">0x2000</span>);</code></pre></div>\n<p>And this will panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= AddrRange::new(<span class=\"number\">0x2000usize</span>, <span class=\"number\">0x1000</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_new</a>(start: A, end: A) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;AddrRange&lt;A&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new address range from the given range.</p>\n<p>Returns <code>None</code> if <code>start &gt; end</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::AddrRange;\n\n<span class=\"kw\">let </span>range = AddrRange::try_new(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x2000</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(range.start, <span class=\"number\">0x1000</span>);\n<span class=\"macro\">assert_eq!</span>(range.end, <span class=\"number\">0x2000</span>);\n<span class=\"macro\">assert!</span>(AddrRange::try_new(<span class=\"number\">0x2000usize</span>, <span class=\"number\">0x1000</span>).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">new_unchecked</a>(start: A, end: A) -&gt; AddrRange&lt;A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new address range from the given range without checking the\nvalidity.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The caller must ensure that <code>start &lt;= end</code>, otherwise the range will be\ninvalid and unexpected consequences will occur.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::AddrRange;\n\n<span class=\"kw\">let </span>range = <span class=\"kw\">unsafe </span>{ AddrRange::new_unchecked(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x2000</span>) };\n<span class=\"macro\">assert_eq!</span>(range.start, <span class=\"number\">0x1000</span>);\n<span class=\"macro\">assert_eq!</span>(range.end, <span class=\"number\">0x2000</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_start_size\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_start_size</a>(start: A, size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; AddrRange&lt;A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new address range from the start address and the size.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>size</code> is too large and causes overflow during evaluating the\nend address.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::AddrRange;\n\n<span class=\"kw\">let </span>range = AddrRange::from_start_size(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x1000</span>);\n<span class=\"macro\">assert_eq!</span>(range.start, <span class=\"number\">0x1000</span>);\n<span class=\"macro\">assert_eq!</span>(range.end, <span class=\"number\">0x2000</span>);</code></pre></div>\n<p>And this will panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= AddrRange::from_start_size(<span class=\"number\">0x1000usize</span>, usize::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_start_size\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_from_start_size</a>(start: A, size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;AddrRange&lt;A&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new address range from the start address and the size.</p>\n<p>Returns <code>None</code> if <code>size</code> is too large and causes overflow during\nevaluating the end address.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::AddrRange;\n\n<span class=\"kw\">let </span>range = AddrRange::try_from_start_size(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x1000</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(range.start, <span class=\"number\">0x1000</span>);\n<span class=\"macro\">assert_eq!</span>(range.end, <span class=\"number\">0x2000</span>);\n<span class=\"macro\">assert!</span>(AddrRange::try_from_start_size(<span class=\"number\">0x1000usize</span>, usize::MAX).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_start_size_unchecked\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">from_start_size_unchecked</a>(start: A, size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; AddrRange&lt;A&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new address range from the start address and the size without\nchecking the validity.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The caller must ensure that <code>size</code> is not too large and won’t cause\noverflow during evaluating the end address. Failing to do so will\ncreate an invalid range and cause unexpected consequences.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::AddrRange;\n\n<span class=\"kw\">let </span>range = <span class=\"kw\">unsafe </span>{ AddrRange::from_start_size_unchecked(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x1000</span>) };\n<span class=\"macro\">assert_eq!</span>(range.start, <span class=\"number\">0x1000</span>);\n<span class=\"macro\">assert_eq!</span>(range.end, <span class=\"number\">0x2000</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the range is empty.</p>\n<p>It’s also guaranteed that <code>false</code> will be returned if the range is\ninvalid (i.e., <code>start &gt; end</code>).</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::AddrRange;\n\n<span class=\"macro\">assert!</span>(AddrRange::new(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x1000</span>).is_empty());\n<span class=\"macro\">assert!</span>(!AddrRange::new(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x2000</span>).is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">size</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the size of the range.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::AddrRange;\n\n<span class=\"macro\">assert_eq!</span>(AddrRange::new(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x1000</span>).size(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(AddrRange::new(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x2000</span>).size(), <span class=\"number\">0x1000</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains</a>(self, addr: A) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the range contains the given address.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::AddrRange;\n\n<span class=\"kw\">let </span>range = AddrRange::new(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x2000</span>);\n<span class=\"macro\">assert!</span>(!range.contains(<span class=\"number\">0x0fff</span>));\n<span class=\"macro\">assert!</span>(range.contains(<span class=\"number\">0x1000</span>));\n<span class=\"macro\">assert!</span>(range.contains(<span class=\"number\">0x1fff</span>));\n<span class=\"macro\">assert!</span>(!range.contains(<span class=\"number\">0x2000</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_range\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains_range</a>(self, other: AddrRange&lt;A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the range contains the given address range.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::{addr_range, AddrRange};\n\n<span class=\"kw\">let </span>range = AddrRange::new(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x2000</span>);\n<span class=\"macro\">assert!</span>(!range.contains_range(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0x0usize</span>..<span class=\"number\">0xfff</span>)));\n<span class=\"macro\">assert!</span>(!range.contains_range(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0x0fffusize</span>..<span class=\"number\">0x1fff</span>)));\n<span class=\"macro\">assert!</span>(range.contains_range(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0x1001usize</span>..<span class=\"number\">0x1fff</span>)));\n<span class=\"macro\">assert!</span>(range.contains_range(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0x1000usize</span>..<span class=\"number\">0x2000</span>)));\n<span class=\"macro\">assert!</span>(!range.contains_range(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0x1001usize</span>..<span class=\"number\">0x2001</span>)));\n<span class=\"macro\">assert!</span>(!range.contains_range(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0x2001usize</span>..<span class=\"number\">0x3001</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contained_in\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contained_in</a>(self, other: AddrRange&lt;A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the range is contained in the given address range.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::{addr_range, AddrRange};\n\n<span class=\"kw\">let </span>range = AddrRange::new(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x2000</span>);\n<span class=\"macro\">assert!</span>(!range.contained_in(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0xfffusize</span>..<span class=\"number\">0x1fff</span>)));\n<span class=\"macro\">assert!</span>(!range.contained_in(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0x1001usize</span>..<span class=\"number\">0x2001</span>)));\n<span class=\"macro\">assert!</span>(range.contained_in(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0xfffusize</span>..<span class=\"number\">0x2001</span>)));\n<span class=\"macro\">assert!</span>(range.contained_in(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0x1000usize</span>..<span class=\"number\">0x2000</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overlaps\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">overlaps</a>(self, other: AddrRange&lt;A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the range overlaps with the given address range.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>memory_addr::{addr_range, AddrRange};\n\n<span class=\"kw\">let </span>range = AddrRange::new(<span class=\"number\">0x1000usize</span>, <span class=\"number\">0x2000usize</span>);\n<span class=\"macro\">assert!</span>(!range.overlaps(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0xfffusize</span>..<span class=\"number\">0xfff</span>)));\n<span class=\"macro\">assert!</span>(!range.overlaps(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0x2000usize</span>..<span class=\"number\">0x2000</span>)));\n<span class=\"macro\">assert!</span>(!range.overlaps(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0xfffusize</span>..<span class=\"number\">0x1000</span>)));\n<span class=\"macro\">assert!</span>(range.overlaps(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0xfffusize</span>..<span class=\"number\">0x1001</span>)));\n<span class=\"macro\">assert!</span>(range.overlaps(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0x1fffusize</span>..<span class=\"number\">0x2001</span>)));\n<span class=\"macro\">assert!</span>(range.overlaps(<span class=\"macro\">addr_range!</span>(<span class=\"number\">0xfffusize</span>..<span class=\"number\">0x2001</span>)));</code></pre></div>\n</div></details></div></details>",0,"axhal::mem::PhysAddrRange","axhal::mem::VirtAddrRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-AddrRange%3CA%3E\" class=\"impl\"><a href=\"#impl-Clone-for-AddrRange%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for AddrRange&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + MemoryAddr,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; AddrRange&lt;A&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","axhal::mem::PhysAddrRange","axhal::mem::VirtAddrRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-AddrRange%3CA%3E\" class=\"impl\"><a href=\"#impl-Debug-for-AddrRange%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for AddrRange&lt;A&gt;<div class=\"where\">where\n    A: MemoryAddr + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3><div class=\"docblock\"><p>Implementations of <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\"><code>Debug</code></a> for [<code>AddrRange</code>].</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","axhal::mem::PhysAddrRange","axhal::mem::VirtAddrRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-AddrRange%3CA%3E\" class=\"impl\"><a href=\"#impl-Default-for-AddrRange%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for AddrRange&lt;A&gt;<div class=\"where\">where\n    A: MemoryAddr,</div></h3><div class=\"docblock\"><p>Implementations of <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> for [<code>AddrRange</code>].</p>\n</div></section></summary><div class=\"docblock\"><p>The default value is an empty range <code>Range { start: 0, end: 0 }</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; AddrRange&lt;A&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","axhal::mem::PhysAddrRange","axhal::mem::VirtAddrRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-AddrRange%3CA%3E\" class=\"impl\"><a href=\"#impl-LowerHex-for-AddrRange%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for AddrRange&lt;A&gt;<div class=\"where\">where\n    A: MemoryAddr + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a>,</div></h3><div class=\"docblock\"><p>Implementations of <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\"><code>LowerHex</code></a> for [<code>AddrRange</code>].</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerHex","axhal::mem::PhysAddrRange","axhal::mem::VirtAddrRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-AddrRange%3CA%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-AddrRange%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for AddrRange&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + MemoryAddr,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;AddrRange&lt;A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","axhal::mem::PhysAddrRange","axhal::mem::VirtAddrRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CRange%3CT%3E%3E-for-AddrRange%3CA%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3CRange%3CT%3E%3E-for-AddrRange%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;T&gt;&gt; for AddrRange&lt;A&gt;<div class=\"where\">where\n    A: MemoryAddr + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt;,</div></h3><div class=\"docblock\"><p>Conversion from <a href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\"><code>Range</code></a> to [<code>AddrRange</code>], provided that the type of the\nendpoints can be converted to the address type <code>A</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;T&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;AddrRange&lt;A&gt;, &lt;AddrRange&lt;A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;T&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Range<T>>","axhal::mem::PhysAddrRange","axhal::mem::VirtAddrRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-AddrRange%3CA%3E\" class=\"impl\"><a href=\"#impl-UpperHex-for-AddrRange%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for AddrRange&lt;A&gt;<div class=\"where\">where\n    A: MemoryAddr + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a>,</div></h3><div class=\"docblock\"><p>Implementations of <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\"><code>UpperHex</code></a> for [<code>AddrRange</code>].</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperHex","axhal::mem::PhysAddrRange","axhal::mem::VirtAddrRange"],["<section id=\"impl-Copy-for-AddrRange%3CA%3E\" class=\"impl\"><a href=\"#impl-Copy-for-AddrRange%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for AddrRange&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + MemoryAddr,</div></h3></section>","Copy","axhal::mem::PhysAddrRange","axhal::mem::VirtAddrRange"],["<section id=\"impl-Eq-for-AddrRange%3CA%3E\" class=\"impl\"><a href=\"#impl-Eq-for-AddrRange%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for AddrRange&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + MemoryAddr,</div></h3></section>","Eq","axhal::mem::PhysAddrRange","axhal::mem::VirtAddrRange"],["<section id=\"impl-StructuralPartialEq-for-AddrRange%3CA%3E\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-AddrRange%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for AddrRange&lt;A&gt;<div class=\"where\">where\n    A: MemoryAddr,</div></h3></section>","StructuralPartialEq","axhal::mem::PhysAddrRange","axhal::mem::VirtAddrRange"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[33916]}