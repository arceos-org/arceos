[package]
name = "libz-sys"
version = "1.1.8"
authors = ["Alex Crichton <alex@alexcrichton.com>", "Josh Triplett <josh@joshtriplett.org>"]
links = "z"
license = "MIT OR Apache-2.0"
repository = "https://github.com/rust-lang/libz-sys"
description = "Low-level bindings to the system libz library (also known as zlib)."
categories = ["compression", "external-ffi-bindings"]
keywords = ["zlib", "zlib-ng"]
edition = "2018"

exclude = [
    "/.github",
    "/.gitmodules",
    "/Cargo-zng.toml",
    "/cargo-zng",
    "/ci",
    "/systest"
]

[workspace]
members = ["systest"]

[dependencies]
# When this feature is disabled, zlib will be built in Z_SOLO mode which
# removes dependency on any external libraries like libc at the cost of
# eliminating some high-level functions like gz*, compress* and
# uncompress, and requiring embedder to provide memory allocation
# routines to deflate and inflate.
libc = { version = "0.2.43", optional = true }

[build-dependencies]
pkg-config = "0.3.9"
cc = "1.0.18"
cmake = { version = "0.1.44", optional = true }

[target.'cfg(target_env = "msvc")'.build-dependencies]
vcpkg = "0.2"

[features]
default = ["libc", "stock-zlib"]
# By default, libz-sys uses stock zlib. If you set default-features=false,
# enable the zlib-ng feature, and don't enable the stock-zlib feature, libz-sys
# will instead supply the high-performance zlib-ng, in zlib-compat mode. Any
# application or library designed for zlib should work with zlib-ng in
# zlib-compat mode, as long as it doesn't make assumptions about the exact size
# or output of the deflated data (e.g. "compressing this data produces exactly
# this many bytes"), and as long as you don't also dynamically pull in a copy
# of stock zlib (which will produce conflicting symbols). If a single crate in
# the dependency graph requests stock-zlib (or doesn't disable default
# features), you'll get stock zlib.
#
# Library crates should use:
# libz-sys = { version = "1.1.0", default-features = false, features = ["libc"] }
# (Omit the libc feature if you don't require the corresponding functions.)
#
# This allows higher-level crates depending on your library to opt into zlib-ng
# if desired.
#
# Building zlib-ng requires cmake.
zlib-ng =  ["libc", "cmake"]
stock-zlib = []
# Deprecated: the assembly routines are outdated, and either reduce performance
# or cause segfaults.
asm = []
# Enable this feature if you want to have a statically linked libz
static = []
